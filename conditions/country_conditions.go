// Code generated by cql-gen v0.0.5, DO NOT EDIT.
package conditions

import (
	models "github.com/FrancoLiberali/cql-tutorial/models"
	condition "github.com/FrancoLiberali/cql/condition"
	model "github.com/FrancoLiberali/cql/model"
	"time"
)

func (countryConditions countryConditions) Capital(conditions ...condition.Condition[models.City]) condition.JoinCondition[models.Country] {
	return condition.NewJoinCondition[models.Country, models.City](conditions, "Capital", "CapitalID", countryConditions.preload(), "ID", City.preload())
}

type countryConditions struct {
	ID        condition.Field[models.Country, model.UUID]
	CreatedAt condition.Field[models.Country, time.Time]
	UpdatedAt condition.Field[models.Country, time.Time]
	DeletedAt condition.Field[models.Country, time.Time]
	Name      condition.StringField[models.Country]
	CapitalID condition.NullableField[models.Country, model.UUID]
}

var Country = countryConditions{
	CapitalID: condition.NullableField[models.Country, model.UUID]{UpdatableField: condition.UpdatableField[models.Country, model.UUID]{Field: condition.Field[models.Country, model.UUID]{Name: "CapitalID"}}},
	CreatedAt: condition.Field[models.Country, time.Time]{Name: "CreatedAt"},
	DeletedAt: condition.Field[models.Country, time.Time]{Name: "DeletedAt"},
	ID:        condition.Field[models.Country, model.UUID]{Name: "ID"},
	Name:      condition.StringField[models.Country]{UpdatableField: condition.UpdatableField[models.Country, string]{Field: condition.Field[models.Country, string]{Name: "Name"}}},
	UpdatedAt: condition.Field[models.Country, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the Country when doing a query
func (countryConditions countryConditions) preload() condition.Condition[models.Country] {
	return condition.NewPreloadCondition[models.Country](countryConditions.ID, countryConditions.CreatedAt, countryConditions.UpdatedAt, countryConditions.DeletedAt, countryConditions.Name, countryConditions.CapitalID)
}
