// Code generated by badaas-cli v0.0.0, DO NOT EDIT.
package conditions

import (
	models "github.com/ditrit/badaas-orm-tutorial/models"
	orm "github.com/ditrit/badaas/orm"
	condition "github.com/ditrit/badaas/orm/condition"
	model "github.com/ditrit/badaas/orm/model"
	query "github.com/ditrit/badaas/orm/query"
	"reflect"
	"time"
)

var countryType = reflect.TypeOf(*new(models.Country))

func (countryConditions countryConditions) IdIs() orm.FieldIs[models.Country, model.UUID] {
	return orm.FieldIs[models.Country, model.UUID]{FieldID: countryConditions.ID}
}
func (countryConditions countryConditions) CreatedAtIs() orm.FieldIs[models.Country, time.Time] {
	return orm.FieldIs[models.Country, time.Time]{FieldID: countryConditions.CreatedAt}
}
func (countryConditions countryConditions) UpdatedAtIs() orm.FieldIs[models.Country, time.Time] {
	return orm.FieldIs[models.Country, time.Time]{FieldID: countryConditions.UpdatedAt}
}
func (countryConditions countryConditions) DeletedAtIs() orm.FieldIs[models.Country, time.Time] {
	return orm.FieldIs[models.Country, time.Time]{FieldID: countryConditions.DeletedAt}
}
func (countryConditions countryConditions) NameIs() orm.StringFieldIs[models.Country] {
	return orm.StringFieldIs[models.Country]{FieldIs: orm.FieldIs[models.Country, string]{FieldID: countryConditions.Name}}
}
func (countryConditions countryConditions) Capital(conditions ...condition.Condition[models.City]) condition.JoinCondition[models.Country] {
	return condition.NewJoinCondition[models.Country, models.City](conditions, "Capital", "CapitalID", countryConditions.Preload(), "ID")
}
func (countryConditions countryConditions) PreloadCapital() condition.JoinCondition[models.Country] {
	return countryConditions.Capital(City.Preload())
}
func (countryConditions countryConditions) CapitalIdIs() orm.FieldIs[models.Country, model.UUID] {
	return orm.FieldIs[models.Country, model.UUID]{FieldID: countryConditions.CapitalID}
}

type countryConditions struct {
	ID        query.FieldIdentifier[model.UUID]
	CreatedAt query.FieldIdentifier[time.Time]
	UpdatedAt query.FieldIdentifier[time.Time]
	DeletedAt query.FieldIdentifier[time.Time]
	Name      query.FieldIdentifier[string]
	CapitalID query.FieldIdentifier[model.UUID]
}

var Country = countryConditions{
	CapitalID: query.FieldIdentifier[model.UUID]{
		Field:     "CapitalID",
		ModelType: countryType,
	},
	CreatedAt: query.FieldIdentifier[time.Time]{
		Field:     "CreatedAt",
		ModelType: countryType,
	},
	DeletedAt: query.FieldIdentifier[time.Time]{
		Field:     "DeletedAt",
		ModelType: countryType,
	},
	ID: query.FieldIdentifier[model.UUID]{
		Field:     "ID",
		ModelType: countryType,
	},
	Name: query.FieldIdentifier[string]{
		Field:     "Name",
		ModelType: countryType,
	},
	UpdatedAt: query.FieldIdentifier[time.Time]{
		Field:     "UpdatedAt",
		ModelType: countryType,
	},
}

func (countryConditions countryConditions) Preload() condition.Condition[models.Country] {
	return condition.NewPreloadCondition[models.Country](countryConditions.ID, countryConditions.CreatedAt, countryConditions.UpdatedAt, countryConditions.DeletedAt, countryConditions.Name, countryConditions.CapitalID)
}
func (countryConditions countryConditions) PreloadRelations() []condition.Condition[models.Country] {
	return []condition.Condition[models.Country]{countryConditions.PreloadCapital()}
}
