// Code generated by cql-gen v0.0.10, DO NOT EDIT.
package conditions

import (
	models "github.com/FrancoLiberali/cql-tutorial/models"
	condition "github.com/FrancoLiberali/cql/condition"
	model "github.com/FrancoLiberali/cql/model"
	"time"
)

func (countryConditions countryConditions) Capital(conditions ...condition.Condition[models.City]) condition.JoinCondition[models.Country] {
	return condition.NewJoinCondition[models.Country, models.City](conditions, "Capital", "CapitalID", countryConditions.preload(), "ID", City.preload())
}

type countryConditions struct {
	ID        condition.Field[models.Country, model.UUID]
	CreatedAt condition.Field[models.Country, time.Time]
	UpdatedAt condition.Field[models.Country, time.Time]
	DeletedAt condition.Field[models.Country, time.Time]
	Name      condition.StringField[models.Country]
	CapitalID condition.NullableField[models.Country, model.UUID]
	Cities    condition.Collection[models.Country, models.City]
}

var Country = countryConditions{
	CapitalID: condition.NewNullableField[models.Country, model.UUID]("CapitalID", "", ""),
	Cities:    condition.NewCollection[models.Country, models.City]("Cities", "ID", "CountryID"),
	CreatedAt: condition.NewField[models.Country, time.Time]("CreatedAt", "", ""),
	DeletedAt: condition.NewField[models.Country, time.Time]("DeletedAt", "", ""),
	ID:        condition.NewField[models.Country, model.UUID]("ID", "", ""),
	Name:      condition.NewStringField[models.Country]("Name", "", ""),
	UpdatedAt: condition.NewField[models.Country, time.Time]("UpdatedAt", "", ""),
}

// Preload allows preloading the Country when doing a query
func (countryConditions countryConditions) preload() condition.Condition[models.Country] {
	return condition.NewPreloadCondition[models.Country](countryConditions.ID, countryConditions.CreatedAt, countryConditions.UpdatedAt, countryConditions.DeletedAt, countryConditions.Name, countryConditions.CapitalID)
}
