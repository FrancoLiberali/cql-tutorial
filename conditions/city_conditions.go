// Code generated by cql-gen v0.0.6, DO NOT EDIT.
package conditions

import (
	models "github.com/FrancoLiberali/cql-tutorial/models"
	condition "github.com/FrancoLiberali/cql/condition"
	model "github.com/FrancoLiberali/cql/model"
	"time"
)

func (cityConditions cityConditions) Country(conditions ...condition.Condition[models.Country]) condition.JoinCondition[models.City] {
	return condition.NewJoinCondition[models.City, models.Country](conditions, "Country", "CountryID", cityConditions.preload(), "ID", Country.preload())
}

type cityConditions struct {
	ID         condition.Field[models.City, model.UUID]
	CreatedAt  condition.Field[models.City, time.Time]
	UpdatedAt  condition.Field[models.City, time.Time]
	DeletedAt  condition.Field[models.City, time.Time]
	Name       condition.StringField[models.City]
	Population condition.UpdatableField[models.City, int]
	CountryID  condition.NullableField[models.City, model.UUID]
}

var City = cityConditions{
	CountryID:  condition.NullableField[models.City, model.UUID]{UpdatableField: condition.UpdatableField[models.City, model.UUID]{Field: condition.Field[models.City, model.UUID]{Name: "CountryID"}}},
	CreatedAt:  condition.Field[models.City, time.Time]{Name: "CreatedAt"},
	DeletedAt:  condition.Field[models.City, time.Time]{Name: "DeletedAt"},
	ID:         condition.Field[models.City, model.UUID]{Name: "ID"},
	Name:       condition.StringField[models.City]{UpdatableField: condition.UpdatableField[models.City, string]{Field: condition.Field[models.City, string]{Name: "Name"}}},
	Population: condition.UpdatableField[models.City, int]{Field: condition.Field[models.City, int]{Name: "Population"}},
	UpdatedAt:  condition.Field[models.City, time.Time]{Name: "UpdatedAt"},
}

// Preload allows preloading the City when doing a query
func (cityConditions cityConditions) preload() condition.Condition[models.City] {
	return condition.NewPreloadCondition[models.City](cityConditions.ID, cityConditions.CreatedAt, cityConditions.UpdatedAt, cityConditions.DeletedAt, cityConditions.Name, cityConditions.Population, cityConditions.CountryID)
}
